{"version":3,"sources":["App.js","index.js"],"names":["App","props","sendStream","stream","socket","emit","client","io","state","users","streamConstraints","video","width","window","innerWidth","height","innerHeight","audio","this","document","querySelector","navigator","mediaDevices","getUserMedia","then","InitPeer","type","peer","Peer","initiator","trickle","on","console","log","createElement","id","className","srcObject","appendChild","play","CreateVideo","getElementById","remove","destroy","offer","data","signal","answer","gotAnswer","write","removeChild","catch","err","muted","React","Component","ReactDOM","render","StrictMode"],"mappings":"wQAwHeA,E,kDA9Gb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IA4FRC,WAAa,SAACC,GACZ,EAAKC,OAAOC,KAAK,SAAUF,IA5F3B,EAAKG,OAAS,GACd,EAAKF,OAASG,IATR,iCAUN,EAAKC,MAAQ,CAACC,MAAO,GACrB,EAAKC,kBAAoB,CACvBC,MAAO,CAAEC,MAAOC,OAAOC,WAAYC,OAAQF,OAAOG,aAClDC,OAAO,GAPO,E,gEAaG,IACdX,EAAkBY,KAAlBZ,OAAQF,EAAUc,KAAVd,OACTO,EAAQQ,SAASC,cAAc,SACnCC,UAAUC,aAAaC,aAAaL,KAAKR,mBACtCc,MAAK,SAAArB,GAMJ,SAASsB,EAASC,GAChB,IAAIC,EAAO,IAAIC,IAAK,CAAEC,UAAoB,SAATH,EAAgCvB,OAAQA,EAAQ2B,SAAS,IAS1F,OARAH,EAAKI,GAAG,UAAU,SAAA5B,GAChB6B,QAAQC,IAAI,aAoChB,SAAqB9B,GACnB6B,QAAQC,IAAI,gBACZ,IAAItB,EAAQQ,SAASe,cAAc,SACnCvB,EAAMwB,GAAK,YACXxB,EAAMyB,UAAY,OAClBzB,EAAM0B,UAAYlC,EAClBgB,SAASC,cAAc,mBAAmBkB,YAAY3B,GACtDA,EAAM4B,OA1CJC,CAAYrC,MAEdwB,EAAKI,GAAG,SAAS,WACfZ,SAASsB,eAAe,aAAaC,SACrCf,EAAKgB,aAEAhB,EAfTvB,EAAOC,KAAK,aACZM,EAAM0B,UAAYlC,EAClBQ,EAAM4B,OAgENnC,EAAO2B,GAAG,gBAlCV,SAAqBa,GACnB,IAAIjB,EAAOF,EAAS,WACpBE,EAAKI,GAAG,UAAU,SAAAc,GAAI,OAAIzC,EAAOC,KAAK,SAAUwC,MAChDlB,EAAKmB,OAAOF,MAgCdxC,EAAO2B,GAAG,iBA7BW,SAACgB,GACpBzC,EAAO0C,WAAY,EACR1C,EAAOqB,KACbmB,OAAOC,MA2Bd3C,EAAO2B,GAAG,iBAdV,WACEZ,SAAS8B,MAAM,6CAcjB7C,EAAO2B,GAAG,cAlDV,WACEC,QAAQC,IAAI,eACZ3B,EAAO0C,WAAY,EACnB,IAAIrB,EAAOF,EAAS,QACpBO,QAAQC,IAAIN,GACZA,EAAKI,GAAG,UAAU,SAAAc,GAChBb,QAAQC,IAAIY,GACPvC,EAAO0C,WAAW5C,EAAOC,KAAK,QAASwC,MAE9CvC,EAAOqB,KAAOA,KA0ChBvB,EAAO2B,GAAG,cAZS,WACjBC,QAAQC,IAAI3B,GACZ0B,QAAQC,IAAI,iBACZ,IAAItB,EAAQQ,SAASC,cAAc,cAChCT,GAAOQ,SAASC,cAAc,mBAAmB8B,YAAYvC,SAUnEwC,OAAM,SAAAC,GAAG,OAAIjC,SAAS8B,MAAMG,Q,+BAQ/B,OACE,yBAAKhB,UAAU,OACb,kDACA,4CAAkBlB,KAAKV,MAAMC,OAC7B,yBAAK0B,GAAG,kBACN,2BAAOA,GAAG,OAAOkB,OAAK,U,GAzGdC,IAAMC,WCHxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvC,SAASsB,eAAe,U","file":"static/js/main.1e7f1bd0.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport io from 'socket.io-client'\nimport Peer from 'simple-peer'\nlet url = 'https://cum-io.herokuapp.com/'\n// let url = 'http://localhost:3000'\n\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.client = {}\n    this.socket = io(url)\n    this.state = {users: 0}\n    this.streamConstraints = {\n      video: { width: window.innerWidth, height: window.innerHeight},\n      audio: true\n    }\n  }\n  \n  \n\n  componentDidMount() {\n    let {client, socket} = this\n    let video = document.querySelector('#main')\n    navigator.mediaDevices.getUserMedia(this.streamConstraints)\n      .then(stream => {\n        socket.emit('NewClient')\n        video.srcObject = stream\n        video.play()\n\n        // used to initialize a peer\n        function InitPeer(type) {\n          let peer = new Peer({ initiator: type === 'init' ? true : false, stream: stream, trickle: false })\n          peer.on('stream', stream => {\n            console.log('streaming')\n            CreateVideo(stream)\n          })\n          peer.on('close', () => {\n            document.getElementById('peerVideo').remove()\n            peer.destroy()\n          })\n          return peer\n        }\n\n        // for peer of type init\n        function MakePeer() {\n          console.log('making peer')\n          client.gotAnswer = false\n          let peer = InitPeer('init')\n          console.log(peer)\n          peer.on('signal', data => {\n            console.log(data)\n            if (!client.gotAnswer) socket.emit('Offer', data)\n          })\n          client.peer = peer\n        }\n\n        // for peer of type not init\n        function FrontAnswer(offer) {\n          let peer = InitPeer('notInit')\n          peer.on('signal', data => socket.emit('Answer', data))\n          peer.signal(offer)\n        }\n\n        const SignalAnswer = (answer) => {\n          client.gotAnswer = true\n          let peer = client.peer\n          peer.signal(answer)\n        }\n\n        function CreateVideo(stream) {\n          console.log('create Video')\n          let video = document.createElement('video')\n          video.id = 'peerVideo'\n          video.className = 'peer'\n          video.srcObject = stream\n          document.querySelector('#peer-container').appendChild(video)\n          video.play()\n        }\n\n        function SessionActive() {\n          document.write('Session Active. Please come back later')\n        }\n\n        const Disconnect = () => {\n          console.log(client)\n          console.log('disconnecting')\n          let video = document.querySelector('#peerVideo')\n          if(video) document.querySelector('#peer-container').removeChild(video)\n        }\n\n\n        socket.on('BackendOffer', FrontAnswer)\n        socket.on('BackendAnswer', SignalAnswer)\n        socket.on('SessionActive', SessionActive)\n        socket.on('CreatePeer', MakePeer)\n        socket.on('Disconnect', Disconnect)\n      })\n      .catch(err => document.write(err))\n  }\n\n  sendStream = (stream) => {\n    this.socket.emit('stream', stream)\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <h1>Socket.io Chat App</h1>\n        <p>Users active: {this.state.users}</p>\n        <div id='peer-container'>\n          <video id='main' muted></video>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}