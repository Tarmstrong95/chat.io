{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","sendStream","stream","socket","emit","client","io","this","video","document","querySelector","navigator","mediaDevices","getUserMedia","width","height","audio","then","InitPeer","type","peer","Peer","initiator","trickle","on","console","log","createElement","id","srcObject","appendChild","play","CreateVideo","getElementById","remove","destroy","offer","data","signal","answer","gotAnswer","write","removeChild","catch","err","className","muted","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oRAgHeA,E,kDAtGb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAoFRC,WAAa,SAACC,GACZ,EAAKC,OAAOC,KAAK,SAAUF,IApF3B,EAAKG,OAAS,GACd,EAAKF,OAASG,IAAG,iCAHD,E,gEAMG,IACdD,EAAkBE,KAAlBF,OAAQF,EAAUI,KAAVJ,OACTK,EAAQC,SAASC,cAAc,SACnCC,UAAUC,aAAaC,aAAa,CAAEL,MAAO,CAACM,MAAO,IAAKC,OAAQ,KAAMC,OAAO,IAC5EC,MAAK,SAAAf,GAMJ,SAASgB,EAASC,GAChB,IAAIC,EAAO,IAAIC,IAAK,CAAEC,UAAoB,SAATH,EAAgCjB,OAAQA,EAAQqB,SAAS,IAS1F,OARAH,EAAKI,GAAG,UAAU,SAAAtB,GAChBuB,QAAQC,IAAI,aAoChB,SAAqBxB,GACnBuB,QAAQC,IAAI,gBACZ,IAAIlB,EAAQC,SAASkB,cAAc,SACnCnB,EAAMoB,GAAK,YACXpB,EAAMqB,UAAY3B,EAClBO,SAASC,cAAc,mBAAmBoB,YAAYtB,GACtDA,EAAMuB,OAzCJC,CAAY9B,MAEdkB,EAAKI,GAAG,SAAS,WACff,SAASwB,eAAe,aAAaC,SACrCd,EAAKe,aAEAf,EAfTjB,EAAOC,KAAK,aACZI,EAAMqB,UAAY3B,EAClBM,EAAMuB,OA+DN5B,EAAOqB,GAAG,gBAjCV,SAAqBY,GACnB,IAAIhB,EAAOF,EAAS,WACpBE,EAAKI,GAAG,UAAU,SAAAa,GAAI,OAAIlC,EAAOC,KAAK,SAAUiC,MAChDjB,EAAKkB,OAAOF,MA+BdjC,EAAOqB,GAAG,iBA5BV,SAAsBe,GACpBlC,EAAOmC,WAAY,EACRnC,EAAOe,KACbkB,OAAOC,MA0BdpC,EAAOqB,GAAG,iBAdV,WACEf,SAASgC,MAAM,6CAcjBtC,EAAOqB,GAAG,cAjDV,WACEC,QAAQC,IAAI,eACZrB,EAAOmC,WAAY,EACnB,IAAIpB,EAAOF,EAAS,QACpBO,QAAQC,IAAIN,GACZA,EAAKI,GAAG,UAAU,SAAAa,GAChBZ,QAAQC,IAAIW,GACPhC,EAAOmC,WAAWrC,EAAOC,KAAK,QAASiC,MAE9ChC,EAAOe,KAAOA,KAyChBjB,EAAOqB,GAAG,cAZV,WACEC,QAAQC,IAAIrB,GACZoB,QAAQC,IAAI,iBACZ,IAAIlB,EAAQC,SAASC,cAAc,cAChCF,GAAOC,SAASC,cAAc,mBAAmBgC,YAAYlC,SAUnEmC,OAAM,SAAAC,GAAG,OAAInC,SAASgC,MAAMG,Q,+BAQ/B,OACE,yBAAKC,UAAU,OACb,kDAEA,yBAAKjB,GAAG,kBACN,2BAAOA,GAAG,OAAOkB,OAAK,U,GAjGdC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/C,SAASwB,eAAe,SDyHpB,kBAAmBtB,WACrBA,UAAU8C,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.d1cf7acf.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Cam from './WebCam'\nimport io from 'socket.io-client'\nimport Peer from 'simple-peer'\n\n\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.client = {}\n    this.socket = io('https://cum-io.herokuapp.com/')\n  }\n\n  componentDidMount() {\n    let {client, socket} = this\n    let video = document.querySelector('#main')\n    navigator.mediaDevices.getUserMedia({ video: {width: 200, height: 200}, audio: true})\n      .then(stream => {\n        socket.emit('NewClient')\n        video.srcObject = stream\n        video.play()\n\n        // used to initialize a peer\n        function InitPeer(type) {\n          let peer = new Peer({ initiator: type === 'init' ? true : false, stream: stream, trickle: false })\n          peer.on('stream', stream => {\n            console.log('streaming')\n            CreateVideo(stream)\n          })\n          peer.on('close', () => {\n            document.getElementById('peerVideo').remove()\n            peer.destroy()\n          })\n          return peer\n        }\n\n        // for peer of type init\n        function MakePeer() {\n          console.log('making peer')\n          client.gotAnswer = false\n          let peer = InitPeer('init')\n          console.log(peer)\n          peer.on('signal', data => {\n            console.log(data)\n            if (!client.gotAnswer) socket.emit('Offer', data)\n          })\n          client.peer = peer\n        }\n\n        // for peer of type not init\n        function FrontAnswer(offer) {\n          let peer = InitPeer('notInit')\n          peer.on('signal', data => socket.emit('Answer', data))\n          peer.signal(offer)\n        }\n\n        function SignalAnswer(answer) {\n          client.gotAnswer = true\n          let peer = client.peer\n          peer.signal(answer)\n        }\n\n        function CreateVideo(stream) {\n          console.log('create Video')\n          let video = document.createElement('video')\n          video.id = 'peerVideo'\n          video.srcObject = stream\n          document.querySelector('#peer-container').appendChild(video)\n          video.play()\n        }\n\n        function SessionActive() {\n          document.write('Session Active. Please come back later')\n        }\n\n        function Disconnect() {\n          console.log(client)\n          console.log('disconnecting')\n          let video = document.querySelector('#peerVideo')\n          if(video) document.querySelector('#peer-container').removeChild(video)\n        }\n\n\n        socket.on('BackendOffer', FrontAnswer)\n        socket.on('BackendAnswer', SignalAnswer)\n        socket.on('SessionActive', SessionActive)\n        socket.on('CreatePeer', MakePeer)\n        socket.on('Disconnect', Disconnect)\n      })\n      .catch(err => document.write(err))\n  }\n\n  sendStream = (stream) => {\n    this.socket.emit('stream', stream)\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <h1>Socket.io Chat App</h1>\n        {/* <Cam method={this.sendStream}/> */}\n        <div id='peer-container'>\n          <video id='main' muted></video>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}