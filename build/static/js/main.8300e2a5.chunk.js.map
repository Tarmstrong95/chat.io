{"version":3,"sources":["App.js","index.js"],"names":["App","props","sendStream","stream","socket","emit","client","io","this","video","document","querySelector","navigator","mediaDevices","getUserMedia","width","height","audio","then","InitPeer","type","peer","Peer","initiator","trickle","on","console","log","createElement","id","srcObject","appendChild","play","CreateVideo","getElementById","remove","destroy","offer","data","signal","answer","gotAnswer","write","removeChild","catch","err","className","muted","React","Component","ReactDOM","render","StrictMode"],"mappings":"wQA8GeA,E,kDArGb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAoFRC,WAAa,SAACC,GACZ,EAAKC,OAAOC,KAAK,SAAUF,IApF3B,EAAKG,OAAS,GACd,EAAKF,OAASG,IAAG,iCAHD,E,gEAMG,IACdD,EAAkBE,KAAlBF,OAAQF,EAAUI,KAAVJ,OACTK,EAAQC,SAASC,cAAc,SACnCC,UAAUC,aAAaC,aAAa,CAAEL,MAAO,CAACM,MAAO,IAAKC,OAAQ,KAAMC,OAAO,IAC5EC,MAAK,SAAAf,GAMJ,SAASgB,EAASC,GAChB,IAAIC,EAAO,IAAIC,IAAK,CAAEC,UAAoB,SAATH,EAAgCjB,OAAQA,EAAQqB,SAAS,IAS1F,OARAH,EAAKI,GAAG,UAAU,SAAAtB,GAChBuB,QAAQC,IAAI,aAoChB,SAAqBxB,GACnBuB,QAAQC,IAAI,gBACZ,IAAIlB,EAAQC,SAASkB,cAAc,SACnCnB,EAAMoB,GAAK,YACXpB,EAAMqB,UAAY3B,EAClBO,SAASC,cAAc,mBAAmBoB,YAAYtB,GACtDA,EAAMuB,OAzCJC,CAAY9B,MAEdkB,EAAKI,GAAG,SAAS,WACff,SAASwB,eAAe,aAAaC,SACrCd,EAAKe,aAEAf,EAfTjB,EAAOC,KAAK,aACZI,EAAMqB,UAAY3B,EAClBM,EAAMuB,OA+DN5B,EAAOqB,GAAG,gBAjCV,SAAqBY,GACnB,IAAIhB,EAAOF,EAAS,WACpBE,EAAKI,GAAG,UAAU,SAAAa,GAAI,OAAIlC,EAAOC,KAAK,SAAUiC,MAChDjB,EAAKkB,OAAOF,MA+BdjC,EAAOqB,GAAG,iBA5BV,SAAsBe,GACpBlC,EAAOmC,WAAY,EACRnC,EAAOe,KACbkB,OAAOC,MA0BdpC,EAAOqB,GAAG,iBAdV,WACEf,SAASgC,MAAM,6CAcjBtC,EAAOqB,GAAG,cAjDV,WACEC,QAAQC,IAAI,eACZrB,EAAOmC,WAAY,EACnB,IAAIpB,EAAOF,EAAS,QACpBO,QAAQC,IAAIN,GACZA,EAAKI,GAAG,UAAU,SAAAa,GAChBZ,QAAQC,IAAIW,GACPhC,EAAOmC,WAAWrC,EAAOC,KAAK,QAASiC,MAE9ChC,EAAOe,KAAOA,KAyChBjB,EAAOqB,GAAG,cAZV,WACEC,QAAQC,IAAIrB,GACZoB,QAAQC,IAAI,iBACZ,IAAIlB,EAAQC,SAASC,cAAc,cAChCF,GAAOC,SAASC,cAAc,mBAAmBgC,YAAYlC,SAUnEmC,OAAM,SAAAC,GAAG,OAAInC,SAASgC,MAAMG,Q,+BAQ/B,OACE,yBAAKC,UAAU,OACb,kDACA,yBAAKjB,GAAG,kBACN,2BAAOA,GAAG,OAAOkB,OAAK,U,GAhGdC,IAAMC,WCFxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1C,SAASwB,eAAe,U","file":"static/js/main.8300e2a5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport io from 'socket.io-client'\nimport Peer from 'simple-peer'\n\n\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.client = {}\n    this.socket = io('https://cum-io.herokuapp.com/')\n  }\n\n  componentDidMount() {\n    let {client, socket} = this\n    let video = document.querySelector('#main')\n    navigator.mediaDevices.getUserMedia({ video: {width: 200, height: 200}, audio: true})\n      .then(stream => {\n        socket.emit('NewClient')\n        video.srcObject = stream\n        video.play()\n\n        // used to initialize a peer\n        function InitPeer(type) {\n          let peer = new Peer({ initiator: type === 'init' ? true : false, stream: stream, trickle: false })\n          peer.on('stream', stream => {\n            console.log('streaming')\n            CreateVideo(stream)\n          })\n          peer.on('close', () => {\n            document.getElementById('peerVideo').remove()\n            peer.destroy()\n          })\n          return peer\n        }\n\n        // for peer of type init\n        function MakePeer() {\n          console.log('making peer')\n          client.gotAnswer = false\n          let peer = InitPeer('init')\n          console.log(peer)\n          peer.on('signal', data => {\n            console.log(data)\n            if (!client.gotAnswer) socket.emit('Offer', data)\n          })\n          client.peer = peer\n        }\n\n        // for peer of type not init\n        function FrontAnswer(offer) {\n          let peer = InitPeer('notInit')\n          peer.on('signal', data => socket.emit('Answer', data))\n          peer.signal(offer)\n        }\n\n        function SignalAnswer(answer) {\n          client.gotAnswer = true\n          let peer = client.peer\n          peer.signal(answer)\n        }\n\n        function CreateVideo(stream) {\n          console.log('create Video')\n          let video = document.createElement('video')\n          video.id = 'peerVideo'\n          video.srcObject = stream\n          document.querySelector('#peer-container').appendChild(video)\n          video.play()\n        }\n\n        function SessionActive() {\n          document.write('Session Active. Please come back later')\n        }\n\n        function Disconnect() {\n          console.log(client)\n          console.log('disconnecting')\n          let video = document.querySelector('#peerVideo')\n          if(video) document.querySelector('#peer-container').removeChild(video)\n        }\n\n\n        socket.on('BackendOffer', FrontAnswer)\n        socket.on('BackendAnswer', SignalAnswer)\n        socket.on('SessionActive', SessionActive)\n        socket.on('CreatePeer', MakePeer)\n        socket.on('Disconnect', Disconnect)\n      })\n      .catch(err => document.write(err))\n  }\n\n  sendStream = (stream) => {\n    this.socket.emit('stream', stream)\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <h1>Socket.io Chat App</h1>\n        <div id='peer-container'>\n          <video id='main' muted></video>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}